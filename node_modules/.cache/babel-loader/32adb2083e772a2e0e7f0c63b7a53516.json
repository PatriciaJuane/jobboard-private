{"ast":null,"code":"var _jsxFileName = \"/Users/patricia/Documents/GitHub/job-board/src/components/ResetPassword.js\";\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '../utils/supabaseClient';\nconst ResetPassword = () => {\n  const [newPassword, setNewPassword] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const navigate = useNavigate();\n\n  /**\n     * Step 2: Once the user is redirected back to your application,\n     * ask the user to reset their password.\n     */\n  useEffect(() => {\n    supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event == \"PASSWORD_RECOVERY\") {\n        const newPassword = prompt(\"What would you like your new password to be?\");\n        const {\n          data,\n          error\n        } = await supabase.auth.updateUser({\n          password: newPassword\n        });\n        if (data) alert(\"Password updated successfully!\");\n        if (error) alert(\"There was an error updating your password.\");\n      }\n    });\n  }, []);\n  const handlePasswordReset = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    // Retrieve the access token from the URL\n    const url = new URL(window.location.href);\n    const accessToken = url.searchParams.get('access_token');\n    if (!accessToken) {\n      setError('Invalid or missing token');\n      setLoading(false);\n      return;\n    }\n    try {\n      // Use Supabase to update the password using the token\n      const {\n        error\n      } = await supabase.auth.updateUser({\n        access_token: accessToken,\n        // Pass the access token from the URL\n        password: newPassword // New password entered by the user\n      });\n      if (error) {\n        setError(error.message);\n      } else {\n        setSuccess(true);\n        alert('Password successfully updated!');\n        navigate('/login'); // Redirect to login after successful password reset\n      }\n    } catch (error) {\n      setError('Something went wrong. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"reset-password-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"reset-password-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"Reset Your Password\"), error && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }\n  }, error), success && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'green'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, \"Password successfully updated!\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handlePasswordReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"New Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    value: newPassword,\n    onChange: e => setNewPassword(e.target.value),\n    required: true,\n    placeholder: \"Enter your new password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, loading ? 'Resetting Password...' : 'Reset Password'))));\n};\nexport default ResetPassword;","map":{"version":3,"names":["React","useState","useNavigate","supabase","ResetPassword","newPassword","setNewPassword","error","setError","loading","setLoading","success","setSuccess","navigate","useEffect","auth","onAuthStateChange","event","session","prompt","data","updateUser","password","alert","handlePasswordReset","e","preventDefault","url","URL","window","location","href","accessToken","searchParams","get","access_token","message","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onSubmit","type","value","onChange","target","required","placeholder","disabled"],"sources":["/Users/patricia/Documents/GitHub/job-board/src/components/ResetPassword.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '../utils/supabaseClient';\n\nconst ResetPassword = () => {\n  const [newPassword, setNewPassword] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const navigate = useNavigate();\n\n\n /**\n    * Step 2: Once the user is redirected back to your application,\n    * ask the user to reset their password.\n    */\n useEffect(() => {\n  supabase.auth.onAuthStateChange(async (event, session) => {\n    if (event == \"PASSWORD_RECOVERY\") {\n      const newPassword = prompt(\"What would you like your new password to be?\");\n      const { data, error } = await supabase.auth\n        .updateUser({ password: newPassword })\n\n      if (data) alert(\"Password updated successfully!\")\n      if (error) alert(\"There was an error updating your password.\")\n    }\n  })\n  }, [])\n\n\n\n  const handlePasswordReset = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    // Retrieve the access token from the URL\n    const url = new URL(window.location.href);\n    const accessToken = url.searchParams.get('access_token');\n\n    if (!accessToken) {\n      setError('Invalid or missing token');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      // Use Supabase to update the password using the token\n      const { error } = await supabase.auth.updateUser({\n        access_token: accessToken,  // Pass the access token from the URL\n        password: newPassword,      // New password entered by the user\n      });\n\n      if (error) {\n        setError(error.message);\n      } else {\n        setSuccess(true);\n        alert('Password successfully updated!');\n        navigate('/login');  // Redirect to login after successful password reset\n      }\n    } catch (error) {\n      setError('Something went wrong. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"reset-password-container\">\n      <div className=\"reset-password-box\">\n        <h2>Reset Your Password</h2>\n        {error && <p style={{ color: 'red' }}>{error}</p>}\n        {success && <p style={{ color: 'green' }}>Password successfully updated!</p>}\n        <form onSubmit={handlePasswordReset}>\n          <label>New Password</label>\n          <input\n            type=\"password\"\n            value={newPassword}\n            onChange={(e) => setNewPassword(e.target.value)}\n            required\n            placeholder=\"Enter your new password\"\n          />\n          <button type=\"submit\" disabled={loading}>\n            {loading ? 'Resetting Password...' : 'Reset Password'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,QAAQ,QAAQ,yBAAyB;AAElD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAG/B;AACD;AACA;AACA;EACCY,SAAS,CAAC,MAAM;IACfX,QAAQ,CAACY,IAAI,CAACC,iBAAiB,CAAC,OAAOC,KAAK,EAAEC,OAAO,KAAK;MACxD,IAAID,KAAK,IAAI,mBAAmB,EAAE;QAChC,MAAMZ,WAAW,GAAGc,MAAM,CAAC,8CAA8C,CAAC;QAC1E,MAAM;UAAEC,IAAI;UAAEb;QAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACY,IAAI,CACxCM,UAAU,CAAC;UAAEC,QAAQ,EAAEjB;QAAY,CAAC,CAAC;QAExC,IAAIe,IAAI,EAAEG,KAAK,CAAC,gCAAgC,CAAC;QACjD,IAAIhB,KAAK,EAAEgB,KAAK,CAAC,4CAA4C,CAAC;MAChE;IACF,CAAC,CAAC;EACF,CAAC,EAAE,EAAE,CAAC;EAIN,MAAMC,mBAAmB,GAAG,MAAOC,CAAC,IAAK;IACvCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBhB,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAAC,IAAI,CAAC;;IAEd;IACA,MAAMmB,GAAG,GAAG,IAAIC,GAAG,CAACC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC;IACzC,MAAMC,WAAW,GAAGL,GAAG,CAACM,YAAY,CAACC,GAAG,CAAC,cAAc,CAAC;IAExD,IAAI,CAACF,WAAW,EAAE;MAChBxB,QAAQ,CAAC,0BAA0B,CAAC;MACpCE,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IAEA,IAAI;MACF;MACA,MAAM;QAAEH;MAAM,CAAC,GAAG,MAAMJ,QAAQ,CAACY,IAAI,CAACM,UAAU,CAAC;QAC/Cc,YAAY,EAAEH,WAAW;QAAG;QAC5BV,QAAQ,EAAEjB,WAAW,CAAO;MAC9B,CAAC,CAAC;MAEF,IAAIE,KAAK,EAAE;QACTC,QAAQ,CAACD,KAAK,CAAC6B,OAAO,CAAC;MACzB,CAAC,MAAM;QACLxB,UAAU,CAAC,IAAI,CAAC;QAChBW,KAAK,CAAC,gCAAgC,CAAC;QACvCV,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAE;MACvB;IACF,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,QAAQ,CAAC,+CAA+C,CAAC;IAC3D,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEV,KAAA,CAAAqC,aAAA;IAAKC,SAAS,EAAC,0BAA0B;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACvC5C,KAAA,CAAAqC,aAAA;IAAKC,SAAS,EAAC,oBAAoB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACjC5C,KAAA,CAAAqC,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,qBAAuB,CAAC,EAC3BrC,KAAK,iBAAIP,KAAA,CAAAqC,aAAA;IAAGQ,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAM,CAAE;IAAAP,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAErC,KAAS,CAAC,EAChDI,OAAO,iBAAIX,KAAA,CAAAqC,aAAA;IAAGQ,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAQ,CAAE;IAAAP,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,gCAAiC,CAAC,eAC5E5C,KAAA,CAAAqC,aAAA;IAAMU,QAAQ,EAAEvB,mBAAoB;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAClC5C,KAAA,CAAAqC,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAO,cAAmB,CAAC,eAC3B5C,KAAA,CAAAqC,aAAA;IACEW,IAAI,EAAC,UAAU;IACfC,KAAK,EAAE5C,WAAY;IACnB6C,QAAQ,EAAGzB,CAAC,IAAKnB,cAAc,CAACmB,CAAC,CAAC0B,MAAM,CAACF,KAAK,CAAE;IAChDG,QAAQ;IACRC,WAAW,EAAC,yBAAyB;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACtC,CAAC,eACF5C,KAAA,CAAAqC,aAAA;IAAQW,IAAI,EAAC,QAAQ;IAACM,QAAQ,EAAE7C,OAAQ;IAAA8B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACrCnC,OAAO,GAAG,uBAAuB,GAAG,gBAC/B,CACJ,CACH,CACF,CAAC;AAEV,CAAC;AAED,eAAeL,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}