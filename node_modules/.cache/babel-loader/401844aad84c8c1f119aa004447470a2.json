{"ast":null,"code":"var _jsxFileName = \"/Users/patricia/Documents/GitHub/job-board/src/components/ResetPassword.js\";\n// src/components/ResetPassword.js\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '../supabaseClient';\nimport './ResetPassword.css';\nconst ResetPassword = () => {\n  const [newPassword, setNewPassword] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  // Handle form submission\n  const handlePasswordReset = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    // Retrieve the access token from the URL\n    const url = new URL(window.location.href);\n    const accessToken = url.searchParams.get('access_token');\n    if (!accessToken) {\n      setError('Invalid or missing token');\n      setLoading(false);\n      return;\n    }\n\n    // Use Supabase to update the password\n    const {\n      error\n    } = await supabase.auth.updateUser({\n      password: newPassword\n    });\n    if (error) {\n      setError(error.message);\n    } else {\n      alert('Password successfully updated!');\n      navigate('/login'); // Redirect user to the login page after successful password reset\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"reset-password-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"reset-password-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Reset Your Password\"), error && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }\n  }, error), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handlePasswordReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \"New Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    value: newPassword,\n    onChange: e => setNewPassword(e.target.value),\n    required: true,\n    placeholder: \"Enter your new password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, loading ? 'Resetting Password...' : 'Reset Password'))));\n};\nexport default ResetPassword;","map":{"version":3,"names":["React","useState","useNavigate","supabase","ResetPassword","newPassword","setNewPassword","error","setError","loading","setLoading","navigate","handlePasswordReset","e","preventDefault","url","URL","window","location","href","accessToken","searchParams","get","auth","updateUser","password","message","alert","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onSubmit","type","value","onChange","target","required","placeholder","disabled"],"sources":["/Users/patricia/Documents/GitHub/job-board/src/components/ResetPassword.js"],"sourcesContent":["// src/components/ResetPassword.js\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '../supabaseClient';\nimport './ResetPassword.css';\n\nconst ResetPassword = () => {\n  const [newPassword, setNewPassword] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  // Handle form submission\n  const handlePasswordReset = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    // Retrieve the access token from the URL\n    const url = new URL(window.location.href);\n    const accessToken = url.searchParams.get('access_token');\n\n    if (!accessToken) {\n      setError('Invalid or missing token');\n      setLoading(false);\n      return;\n    }\n\n    // Use Supabase to update the password\n    const { error } = await supabase.auth.updateUser({\n      password: newPassword,\n    });\n\n    if (error) {\n      setError(error.message);\n    } else {\n      alert('Password successfully updated!');\n      navigate('/login'); // Redirect user to the login page after successful password reset\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"reset-password-container\">\n      <div className=\"reset-password-box\">\n        <h2>Reset Your Password</h2>\n        {error && <p style={{ color: 'red' }}>{error}</p>}\n        <form onSubmit={handlePasswordReset}>\n          <label>New Password</label>\n          <input\n            type=\"password\"\n            value={newPassword}\n            onChange={(e) => setNewPassword(e.target.value)}\n            required\n            placeholder=\"Enter your new password\"\n          />\n          <button type=\"submit\" disabled={loading}>\n            {loading ? 'Resetting Password...' : 'Reset Password'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}